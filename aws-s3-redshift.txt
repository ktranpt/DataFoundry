--S3 Bucket: datafoundrykqt Load file CSV, Json

arn:aws:s3:::datafoundrykqt
s3://datafoundrykqt/trips.csv

--IAM: Create Redshift role
arn:aws:iam::201993417919:role/myredshiftrole



CREATE TABLE public.trips (
    vendorid varchar ,
    tpep_pickup_datetime timestamp ,
    tpep_dropoff_datetime timestamp,
    passenger_count varchar ,
    trip_distance DECIMAL,
    ratecodeid varchar,
    store_and_fwd_flag character,
    pulocationid varchar,
    dolocationid varchar,
    payment_type varchar,
    fare_amount DECIMAL,
    extra DECIMAL,
    mta_tax DECIMAL,
    tip_amount DECIMAL,
    tolls_amount DECIMAL,
    tripid varchar
) ;

CREATE TABLE public.trips (
    vendorid character varying(256) ENCODE lzo,
    tpep_pickup_datetime timestamp without time zone ENCODE az64,
    tpep_dropoff_datetime timestamp without time zone ENCODE az64,
    passenger_count character varying(256) ENCODE lzo,
    trip_distance numeric(18, 0) ENCODE az64,
    ratecodeid character varying(256) ENCODE lzo,
    store_and_fwd_flag character(1) ENCODE lzo,
    pulocationid character varying(256) ENCODE lzo,
    dolocationid character varying(256) ENCODE lzo,
    payment_type character varying(256) ENCODE lzo,
    fare_amount numeric(18, 0) ENCODE az64,
    extra numeric(18, 0) ENCODE az64,
    mta_tax numeric(18, 0) ENCODE az64,
    tip_amount numeric(18, 0) ENCODE az64,
    tolls_amount numeric(18, 0) ENCODE az64,
    tripid character varying(256) ENCODE lzo
) DISTSTYLE AUTO;

--Load data from S3 into Redshift table--

COPY dev.public.trips FROM 's3://datafoundrykqt/trips.csv' IAM_ROLE 'arn:aws:iam::201993417919:role/myredshiftrole' FORMAT AS CSV DELIMITER ',' QUOTE '"' IGNOREHEADER 1 REGION AS 'ap-southeast-2'

--Error detect 
select * from sys_load_error_detail limit 10;
--delete km in tripdistant 


select * from trips limit 100;

select cast(vendorid as int [(1)]) from trips limit 10;

select convert(int(1), vendorid) from trips limit 10;

SELECT CONVERT(INT, REPLACE(vendorid, varchar('.0'), ''))
  FROM public.[trips];

update public.trips
set vendorid = replace(vendorid, char(.0), '')
where charindex(char)


select vendorid from trips limit 10;

select vendorid,
case when (vendorid = '1.0') then (vendorid = '1')
else (vendorid = '2')
end as "update vendorid"
from trips limit 10;

select vendorid from trips as intid;
where cast(id as INT) ;

select convert(int, replace(vendorid, char))


update trips set vendorid = (case vendorid when '1.0' then '1' else '2' end);


update trips set passenger_count =(RTRIM(passenger_count, '.0'));

update trips set ratecodeid =(RTRIM(ratecodeid, '.0'));
update trips set payment_type =(RTRIM(payment_type, '.0'));





--Assume empty passenger count equal to 1--
update trips set passenger_count = 1 where passenger_count = '';
--Assume empty Rate Code ID equal to 1=Standard rate--
update trips set ratecodeid = 1 where ratecodeid = '';

update trips set vendorid = cast(vendorid as integer);
update trips set passenger_count = cast(passenger_count as integer);
update trips set ratecodeid = cast(ratecodeid as integer);
update trips set payment_type = cast(payment_type as integer);


select sum(passenger_count) as Total from trips;
select sum(payment_type) as Total from trips;